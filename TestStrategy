Test Strategy: 

1 Strategy introduction:
In our project, we tested our program in following steps:
First, we examine if sender and receiver can transfer files as we expected in normal condition.
Second, we tested if our program is reliable under different single-hazard network environments(packet drop, delay, reordered, mangled, duplicated).
Third, we tested if our program is reliable under a mixed-hazard environment(mixed two or more hazards).
Finally, we summarized the performance of each scenario mentioned above.

2 Test details:

2.1 Overall description:
In all test processes, we used “cai.cs.rice.edu” as sender host, and "sky.clear.rice.edu” as receiver host. The account used in both host is “bb26”.
The port we used on receiver side was always “18100”, and the network environment simulator on sender side is “netsim”.
For all scenarios, we always tested two files, smaller one is about 11Kb and the larger one is about 32Mb. We also measured the performances of both files each time.
For performance measuring, we used "time” command on sender side to record file transfer time, “top” command on both sender and receiver side to monitor memory usage, and “diff” command on receiver side to check the integrity of transferred file.
We also optimized several algorithm parameters, like packet size, window length, time out duration, etc., during our test.

2.2 File transferring in normal condition:
In this part, we tested and measured the performance of our program in normal network condition, which is without any artificial hazards.
Test result:
Five times average transfer time for small file is 0.005s
Five times average transfer time for large file is 0.460s

2.3 File Transferring under single-hazard environment:
In this part, we tested and measured the performance of our program under different single-hazard environments, which are packet drop, delay, reordered, mangled, duplicated. For each hazard environment, we further tested performance of low hazard rate and high hazard rate.

2.3.1 Delay
Low rate: netsim --delay 10
Five times average transfer time for small file is 0.005s
Five times average transfer time for large file is 1.080s
High rate: netsim --delay 50
Five times average transfer time for small file is 0.205s
Five times average transfer time for large file is 13.083s

2.3.2 Drop
Low rate: netsim --drop 10
Five times average transfer time for small file is 0.103s
Five times average transfer time for large file is 0.964s
High rate: netsim --drop 50
Five times average transfer time for small file is 0.304s
Five times average transfer time for large file is 13.334s

2.3.3 Reorder
Low rate: netsim --reorder 10
Five times average transfer time for small file is 0.106s
Five times average transfer time for large file is 0.873s
High rate: netsim --reorder 50
Five times average transfer time for small file is 0.606s
Five times average transfer time for large file is 3.365s

2.3.4 Duplicate
Low rate: netsim --duplicate 10
Five times average transfer time for small file is 0.005s
Five times average transfer time for large file is 0.784s
High rate: netsim --duplicate 50
Five times average transfer time for small file is 0.005s
Five times average transfer time for large file is 10.532s

2.3.5 Mangle
Low rate: netsim --mangle 10
Five times average transfer time for small file is 0.005s
Five times average transfer time for large file is 0.760s
High rate: netsim --mangle 50
Five times average transfer time for small file is 0.005s
Five times average transfer time for large file is 10.965s

2.4 File Transferring under mixed-hazard environment:
In this part, we tested and measured the performance of our program under environments mixed at least two hazards.
We tested several cases:

2.4.1 
netsim --drop 10 --mangle 10 --delay 10
Five times average transfer time for small file is 0.024s
Five times average transfer time for large file is 5.414s

2.4.2
netsim --reorder 30 --duplicate 30 --drop 30
Five times average transfer time for small file is 0.405s
Five times average transfer time for large file is 8.371s

2.4.3
netsim --reorder 50 --duplicate 50 --drop 50 --delay 50 --mangle 50
Five times average transfer time for small file is 0.605s
Five times average transfer time for large file is 11.865s

2.5 File integrity:
Each time we tested, we always used “diff" to judge if the incoming file is as same as original one. The conclusion is that our program can always handle those hazards and reliably transfer file.

2.6 Memory usage:
When we did these test, we always open another terminals and run “top” command to monitor the memory usage on both side. The result is that our program needs roughly 1Mb memory for both side.

3 Miscellaneous:
In the test process, we also tried different algorithm parameters, like packet size, window length, time out duration, etc., to optimize our overall performance. The result is that we found when packet size is 12Kb, window size is 80, time out duration is 10ms, our program performance is the best. So we choose these parameters for our final submission.
Another thing need to be clarified is if the drop rate is high, there is a possibility that the receiver side misses the last packet several times, while the sender side is already quit. In this situation, our receiver program will continue waiting for the last packet. We don’t consider this as a bug because there is no way to guarantee that both side can quit gracefully in a high drop rate environment.
